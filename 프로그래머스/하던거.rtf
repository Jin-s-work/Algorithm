{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<vector>\
#include <queue>\
#include <cstring>\
#include <algorithm>\
\
using namespace std;\
\
int arr[101][101];\
int dx[4] = \{0,0,1,-1\};\
int dy[4] = \{1,-1,0,0\};\
\
\
int solution(vector<vector<int> > maps)\
\{\
    int answer = -1;\
    \
    memset(arr, -1, sizeof(arr));\
    // arr
\f1 \'b8\'a6
\f0  
\f1 \'b8\'f0\'b5\'ce
\f0  -1
\f1 \'b7\'ce
\f0  
\f1 \'c7\'d8\'c1\'d6\'be\'ee
\f0  
\f1 \'b3\'f5\'b0\'ed
\f0  
\f1 \'bd\'c3\'c0\'db
\f0 \
    \
    queue<pair<int, int>>q;\
    q.push(\{0,0\});\
    \
    arr[0][0] = 1;\
    // 
\f1 \'c3\'b3\'c0\'bd
\f0  
\f1 \'bd\'c3\'c0\'db\'c0\'ba
\f0  1
\f1 \'b7\'ce
\f0  
\f1 \'c7\'d8\'c1\'d8\'b4\'d9
\f0 .\
    \
    int n = maps.size();\
    int m = maps[0].size();\
    \
    while(!q.empty())\{\
        int x = q.front().first;\
        int y = q.front().second;\
        q.pop();\
        \
        if(x == n-1 && y == m-1)\
            return arr[x][y];\
        // 
\f1 \'b8\'b6\'c1\'f6\'b8\'b7
\f0  
\f1 \'c4\'ad\'bf\'a1
\f0  
\f1 \'b5\'b5\'b4\'de\'c7\'cf\'b8\'e9
\f0  
\f1 \'c0\'cc\'c1\'a6\'b1\'ee\'c1\'f6
\f0  
\f1 \'bd\'d7\'be\'c6\'bf\'c2
\f0  
\f1 \'b0\'aa\'c0\'ce
\f0  arr[x][y]
\f1 \'b8\'a6
\f0  
\f1 \'c3\'e2\'b7\'c2\'c7\'d8\'c1\'d8\'b4\'d9
\f0 .\
        \
        for(int i=0;i<4;i++)\{\
            int nx = x + dx[i];\
            int ny = y + dy[i];\
            \
            if(nx < 0 || nx >= n || ny < 0 || ny >= m)\
                continue;\
            if(maps[nx][ny] == 0)\
                continue;\
            if(arr[nx][ny] == -1)\{\
                arr[nx][ny] = arr[x][y] + 1;\
                q.push(\{nx, ny\});\
                // 
\f1 \'c1\'ef
\f0  
\f1 \'be\'c6\'b9\'ab\'b0\'cd\'b5\'b5
\f0  
\f1 \'be\'c8\'c1\'f6\'b3\'aa\'b0\'a3
\f0  -1
\f1 \'c0\'cf
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0  
\f1 \'c0\'fc\'bf\'a1\'c0\'c7
\f0  x,y
\f1 \'c0\'c7
\f0  
\f1 \'b0\'aa\'bf\'a1\'bc\'ad
\f0  1
\f1 \'c0\'bb
\f0  
\f1 \'b4\'f5\'c7\'d8\'b4\'d9\'b0\'a1
\f0  
\f1 \'c1\'dc
\f0 \
                // 
\f1 \'b1\'d7\'b7\'af\'b0\'ed
\f0  q
\f1 \'b8\'a6
\f0  push
\f1 \'c7\'d8\'bc\'ad
\f0  
\f1 \'bb\'f5\'b7\'ce\'bf\'ee
\f0  
\f1 \'c1\'c2\'c7\'a5\'b7\'ce
\f0  
\f1 \'b3\'aa\'be\'c6\'b0\'a8
\f0 \
            \}\
        \}\
        \
        \
    \}\
    \
    \
    return answer;\
\}}